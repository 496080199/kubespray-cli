#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of Kubespray.
#
#    Foobar is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Foobar is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

__version__ = '0.1'

import sys
import yaml
import time
import os
import argparse
import getpass
try:
    from ansible.utils.display import Display
except ImportError:
    raise ImportError('Cannot find Ansible: Please check your installation')
import kubespray.common
from kubespray.configure import Config
from kubespray.inventory import CfgInventory
#import kubespray.deploy.aws
#import kubespray.deploy.gce
import kubespray.baremetal
#import kubespray.info
display = Display()

def cluster_info(options):
    display.warning('info not configured yet')

def prepare(options):
    kubespray.common.clone_git_repo(options['kubespray_path'], options['kubespray_git_repo'])
    C = CfgInventory(options)
    C.write_inventory()

def aws(options):
    display.warning('aws not configured yet')

def gce(options):
    display.warning('gce not configured yet')

def deploy(options):
    kubespray.baremetal.run_playbook(options)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(prog='kubespray', description='%(prog)s Kubernetes cluster deployment tool')
    parser.add_argument('--config', dest='configfile', help="Config file")

    subparsers = parser.add_subparsers(help='commands')

    # cluster-info
    info_parser = subparsers.add_parser('cluster-info', help='Display information on a running cluster')
    info_parser.set_defaults(func=cluster_info)

    # prepare
    prepare_parser = subparsers.add_parser('prepare', help='generate inventory and create vms on cloud providers')
    prepare_parser.add_argument('--nodes', dest='k8s_nodes', metavar='N', nargs='+',
                                required=True, help='List of nodes')
    prepare_parser.add_argument('--masters', dest='k8s_masters',metavar='N', nargs='+',
                                required=True, help='List of masters')
    prepare_parser.set_defaults(func=prepare)
    
    # aws
    aws_parser = subparsers.add_parser('aws', help='Create AWS instances and generate inventory')
    aws_parser.add_argument('--access_key', dest='aws_access_key', help='AWS access key')
    aws_parser.add_argument('--secret_key', dest='aws_secret_key', help='AWS secret key')
    aws_parser.add_argument('--type', dest='aws_instance_type', help='AWS instance type')
    aws_parser.add_argument('--keypair', dest='aws_keypair_name', help='AWS key pair name')
    aws_parser.add_argument('--region', dest='aws_region', help='AWS region')
    aws_parser.add_argument('--security-group', dest='aws_security_group', help='AWS security group')
    aws_parser.add_argument('--ami', dest='aws_ami', help='AWS AMI')
    aws_parser.add_argument('--instances', dest='cloud_instances_count', type=int, help='Number of nodes')
    aws_parser.add_argument('--masters', dest='cloud_masters_count', type=int, help='Number of masters')
    aws_parser.add_argument('--coreos', default=False, action='store_true', help='bootstrap python on CoreOS')
    aws_parser.set_defaults(func=aws)

    # gce
    gce_parser = subparsers.add_parser('gce', help='Create GCE machines and generate inventory')
    gce_parser.add_argument('--sshkey', dest='gce_sshkey_path', help='GCE ssh key path')
    gce_parser.add_argument('--zone', dest='gce_zone', help='GCE zone')
    gce_parser.add_argument('--type', dest='gce_machine_type', help='GCE machine type')
    gce_parser.add_argument('--image', dest='gce_image', help='GCE image')
    gce_parser.add_argument('--instances', dest='cloud_instances_count', type=int, help='Number of nodes')
    gce_parser.add_argument('--masters', dest='cloud_masters_count', type=int, help='Number of masters')
    gce_parser.add_argument('--coreos', default=False, action='store_true', help='bootstrap python on CoreOS')
    gce_parser.set_defaults(func=gce)

    # deploy
    deploy_parser = subparsers.add_parser('deploy', help='Create GCE machines and generate inventory')
    deploy_parser.add_argument('-u','--user', dest='ansible_user', default=getpass.getuser(), help='Ansible SSH user')
    deploy_parser.add_argument('-n','--network-plugin', default='flannel', choices=['flannel', 'weave', 'calico'])
    deploy_parser.add_argument('--aws', default=False, action='store_true', help='Kubernetes deployment on AWS')
    deploy_parser.add_argument('--gce', default=False, action='store_true', help='Kubernetes deployment on GCE')
    deploy_parser.add_argument('--upgrade', default=False, action='store_true', help='Upgrade Kubernetes cluster')
    deploy_parser.add_argument('--ansible_opts', help='Ansible options')
    deploy_parser.set_defaults(func=deploy)

    # Parse arguments
    args = parser.parse_args()
    arguments = dict(args._get_kwargs())
    if arguments['configfile'] is None:
        arguments['configfile'] = '/etc/kubespray/kubespray.yml'
    # Read configfile and update options dict
    configfile = arguments.get('configfile')
    C = Config(configfile)
    config = C.parse_configfile
    if 'kubespray_path' not in config.keys():
        config['kubespray_path'] = os.path.join(os.path.expanduser("~"), 'kubespray')
    if 'logfile' not in config.keys():
        config['logfile'] = os.path.join(config['kubespray_path'], 'kubespray.log')
    for key,value in arguments.items():
        if value is not None:
            config[key] = value
    # Run functions with all the options
    args.func(config)
